package compass_test

import (
	"context"
	"encoding/json"
	"io/ioutil"
	"testing"

	"github.com/cosmos/cosmos-sdk/crypto/keyring"
	"github.com/stretchr/testify/require"
	"github.com/teamscanworks/compass"
	"go.uber.org/zap"
)

type AnyInterface interface{}
type AnyObject struct{}
type AutoGenerated struct {
	Jsonrpc string `json:"jsonrpc"`
	ID      int    `json:"id"`
	Result  struct {
		NTxs       string   `json:"n_txs"`
		Total      string   `json:"total"`
		TotalBytes string   `json:"total_bytes"`
		Txs        []string `json:"txs"`
	} `json:"result"`
}

func TestDeserializeUnconfirmedTx(t *testing.T) {
	data, err := ioutil.ReadFile("unconfirmed_txs.json")
	require.NoError(t, err)
	var jOut AutoGenerated
	require.NoError(t, json.Unmarshal(data, &jOut))

	logger, err := zap.NewDevelopment()
	require.NoError(t, err)
	cfg := compass.GetStrideConfig()
	require.NotNil(t, cfg)
	client, err := compass.NewClient(logger, cfg, []keyring.Option{compass.DefaultSignatureOptions()})
	require.NoError(t, err)
	txs, err := client.UnconfirmedTransactions(context.Background(), nil)
	require.NoError(t, err)
	// if no txs found, read from test file
	for _, tx := range jOut.Result.Txs {
		txs = append(txs, []byte(tx))
	}
	//client.Codec.InterfaceRegistry.RegisterInterface("stride.claim.MsgClaimFreeAmount", (*types.HasMsgs)(nil))
	//client.Codec.InterfaceRegistry.RegisterImplementations((*types.HasMsgs)(nil), &tx.Tx{})
	decodedTxs, err := client.DeserializeTransactions(txs)
	require.NoError(t, err)
	t.Log("txs", decodedTxs)
	panic("uhoh")
}
